Function Get-ZabbixAlert
{
    <#
    .SYNOPSIS

    Returns a Zabbix alert.

    .DESCRIPTION

    Returns a Zabbix alert.

    .PARAMETER Uri

    The Zabbix instance uri.

    .PARAMETER Credential

    Specifies a user account that has permission to the project.

    .PARAMETER Proxy

    Use a proxy server for the request, rather than connecting directly to the Internet resource. Enter the URI of a network proxy server.

    .PARAMETER ProxyCredential

    Specifie a user account that has permission to use the proxy server that is specified by the -Proxy parameter. The default is the current user.

    .PARAMETER Session

    ZabbixPS session, created by New-ZabbixSession.

    .PARAMETER AlertId

    Return only alerts with the given IDs.

    .PARAMETER ActionId

    Return only alerts generated by the given actions.

    .PARAMETER EventId

    Return only alerts generated by the given events.

    .PARAMETER GroupId

    Return only alerts that use the given host groups in alert conditions.

    .PARAMETER HostId

    Return only alerts that use the given hosts in alert conditions.

    .INPUTS

    None, does not support pipeline.

    .OUTPUTS

    PSObject. Zabbix alert.

    .EXAMPLE

    Returns all Zabbix alerts.

    Get-ZabbixAlert

    .EXAMPLE

    Returns Zabbix Alert with the Alert name of 'myAlert'.

    Get-ZabbixAlert -Name 'myAlert'

    .LINK

    https://www.zabbix.com/documentation/4.2/manual/api/reference/alert/get
    #>
    [CmdletBinding(DefaultParameterSetName = 'ByCredential')]
    param
    (
        [Parameter(Mandatory,
            ParameterSetName = 'ByCredential')]
        [uri]
        $Uri,

        [Parameter(ParameterSetName = 'ByCredential')]
        [pscredential]
        $Credential,

        [Parameter(ParameterSetName = 'ByCredential')]
        [string]
        $Proxy,

        [Parameter(ParameterSetName = 'ByCredential')]
        [pscredential]
        $ProxyCredential,

        [Parameter(Mandatory,
            ParameterSetName = 'BySession')]
        [object]
        $Session,

        [Parameter()]
        [string[]]
        $AlertId,

        [Parameter()]
        [string[]]
        $ActionId,

        [Parameter()]
        [string[]]
        $EventId,

        [Parameter()]
        [string[]]
        $GroupId,

        [Parameter()]
        [string[]]
        $HostId
    )

    begin
    {
        if ($PSCmdlet.ParameterSetName -eq 'BySession')
        {
            $currentSession = $Session | Get-ZabbixSession
            if ($currentSession)
            {
                $Uri = $currentSession.Uri
                $Credential = $currentSession.Credential
                $Proxy = $currentSession.Proxy
                $ProxyCredential = $currentSession.ProxyCredential
                $ApiVersion = $currentSession.ApiVersion
            }
        }
    }

    process
    {
        $body = @{
            method  = 'alert.get'
            jsonrpc = $ApiVersion
            id      = 1

            params  = @{
                output                   = 'extend'
                selectOperations         = 'extend'
                selectRecoveryOperations = 'extend'
                selectFilter             = 'extend'
            }
        }
        if ($AlertId)
        {
            $body.params.alertids = $AlertId
        }
        if ($ActionId)
        {
            $body.params.actionids = $ActionId
        }
        if ($EventId)
        {
            $body.params.eventids = $EventId
        }
        if ($GroupId)
        {
            $body.params.groupids = $GroupId
        }
        if ($HostId)
        {
            $body.params.hostids = $HostId
        }
        $invokeZabbixRestMethodSplat = @{
            Body        = $body
            Uri         = $Uri
            Credential  = $Credential
            ApiVersion  = $ApiVersion
            ErrorAlert = 'Stop'
        }
        if ($Proxy)
        {
            $invokeZabbixRestMethodSplat.Proxy = $Proxy
            if ($ProxyCredential)
            {
                $invokeZabbixRestMethodSplat.ProxyCredential = $ProxyCredential
            }
            else
            {
                $invokeZabbixRestMethodSplat.ProxyUseDefaultCredentials = $true
            }
        }
        return Invoke-ZabbixRestMethod @invokeZabbixRestMethodSplat
    }

    end
    {
    }
}